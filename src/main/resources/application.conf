master {
  hostname = "127.0.0.1"
  port = 10001

  akka {
    loggers = ["akka.event.Logging$DefaultLogger"]
    loglevel = "INFO"

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote {
      enabled-transports = ["akka.remote.netty.tcp"]
      netty.tcp {
        hostname = "127.0.0.1"
        port = 30001
      }
    }

    cluster {
      seed-nodes = ["akka.tcp://master@127.0.0.1:30001"]
      auto-down-unreachable-after = 10s
    }
  }
}

slave {
  hostname = "127.0.0.1"
  port = 10002

  akka {
    loggers = ["akka.event.Logging$DefaultLogger"]
    loglevel = "INFO"

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote {
      enabled-transports = ["akka.remote.netty.tcp"]
      netty.tcp {
        hostname = "127.0.0.1"
        port = 30002
      }
    }

    cluster {
      seed-nodes = ["akka.tcp://master@127.0.0.1:30001"]
      auto-down-unreachable-after = 10s
    }
  }
}

akka {
  extensions = ["akka.cluster.pubsub.DistributedPubSub"]

  cluster.pub-sub {
    # Actor name of the mediator actor, /system/distributedPubSubMediator
    name = distributedPubSubMediator

    # Start the mediator on members tagged with this role.
    # All members are used if undefined or empty.
    role = ""

    # The routing logic to use for 'Send'
    # Possible values: random, round-robin, broadcast
    routing-logic = random

    # How often the DistributedPubSubMediator should send out gossip information
    gossip-interval = 1s

    # Removed entries are pruned after this duration
    removed-time-to-live = 120s

    # Maximum number of elements to transfer in one message when synchronizing the registries.
    # Next chunk will be transferred in next round of gossip.
    max-delta-elements = 3000

    # The id of the dispatcher to use for DistributedPubSubMediator actors.
    # If not specified default dispatcher is used.
    # If specified you need to define the settings of the actual dispatcher.
    #use-dispatcher = ""
  }
}
